/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CrowdSale,
  CrowdSaleInterface,
} from "../../../contracts/CrowSale.sol/CrowdSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bnb_rate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "usdt_rate",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "swapToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BuyTokenByBNB",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BuyTokenByUSDT",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newRate",
        type: "uint256",
      },
    ],
    name: "SetBNBRate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newRate",
        type: "uint256",
      },
    ],
    name: "SetUSDTRate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "SetUSDTToken",
    type: "event",
  },
  {
    inputs: [],
    name: "BNB_rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDT_rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_wallet",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTokenByBNBT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTokenByUSDT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "BNBAmount",
        type: "uint256",
      },
    ],
    name: "getTokenAmountBNB",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "USDTAmount",
        type: "uint256",
      },
    ],
    name: "getTokenAmountUSDT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "new_rate",
        type: "uint256",
      },
    ],
    name: "setBNBRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "new_rate",
        type: "uint256",
      },
    ],
    name: "setUSDTRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token_address",
        type: "address",
      },
    ],
    name: "setUSDTToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdtToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawErc20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001ca238038062001ca28339818101604052810190620000379190620002bb565b620000576200004b620000f160201b60201c565b620000f960201b60201c565b836002819055508260038190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200032d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620001d781620001c2565b8114620001e357600080fd5b50565b600081519050620001f781620001cc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022a82620001fd565b9050919050565b6200023c816200021d565b81146200024857600080fd5b50565b6000815190506200025c8162000231565b92915050565b60006200026f82620001fd565b9050919050565b6000620002838262000262565b9050919050565b620002958162000276565b8114620002a157600080fd5b50565b600081519050620002b5816200028a565b92915050565b60008060008060808587031215620002d857620002d7620001bd565b5b6000620002e887828801620001e6565b9450506020620002fb87828801620001e6565b93505060406200030e878288016200024b565b92505060606200032187828801620002a4565b91505092959194509250565b611965806200033d6000396000f3fe6080604052600436106100fe5760003560e01c8063610757e411610095578063a98ad46c11610064578063a98ad46c146102b6578063acb03d43146102e1578063eb9a04941461031e578063f2fde38b14610328578063fc0c546a14610351576100fe565b8063610757e41461022057806366e226bd1461024b578063715018a6146102745780638da5cb5b1461028b576100fe565b80632be86299116100d15780632be862991461019e5780633ccfd60b146101c75780633e3f2359146101de578063592a00e4146101f5576100fe565b8063157fc821146101035780631832d8b61461012e5780631b4622d61461016b57806325e6574a14610194575b600080fd5b34801561010f57600080fd5b5061011861037c565b6040516101259190611108565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190611154565b610382565b6040516101629190611108565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190611154565b610399565b005b61019c6103e2565b005b3480156101aa57600080fd5b506101c560048036038101906101c09190611154565b610651565b005b3480156101d357600080fd5b506101dc61069a565b005b3480156101ea57600080fd5b506101f36106eb565b005b34801561020157600080fd5b5061020a61084f565b6040516102179190611108565b60405180910390f35b34801561022c57600080fd5b50610235610855565b60405161024291906111c2565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d919061122d565b61087b565b005b34801561028057600080fd5b506102896108fe565b005b34801561029757600080fd5b506102a061090a565b6040516102ad9190611269565b60405180910390f35b3480156102c257600080fd5b506102cb610933565b6040516102d891906112e3565b60405180910390f35b3480156102ed57600080fd5b5061030860048036038101906103039190611154565b610959565b6040516103159190611108565b60405180910390f35b610326610970565b005b34801561033457600080fd5b5061034f600480360381019061034a919061132a565b610bdf565b005b34801561035d57600080fd5b50610366610c63565b60405161037391906112e3565b60405180910390f35b60025481565b6000600354826103929190611386565b9050919050565b6103a1610c89565b806003819055507fbdaa37e3f6679857d8c3e80d172bd45af732a8658cf1d690c81ca96f5a443b5b816040516103d79190611108565b60405180910390a150565b600034905060006103f282610382565b905060008111610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042e9061143d565b60405180910390fd5b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104939190611269565b60206040518083038186803b1580156104ab57600080fd5b505afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190611472565b1015610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b906114eb565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff1631101561057e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610575906114eb565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156105e6573d6000803e3d6000fd5b50610614600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610d07565b7f5c0161fad3fa89cfebd4a74115d9f81661cdd1b9008d05a238ea9d65088e2064338260405161064592919061150b565b60405180910390a15050565b610659610c89565b806002819055507fb0cc740bbbfcd5af22ee3956c6b44d2d6f499e2a86cb11d915fcce88dca2113a8160405161068f9190611108565b60405180910390a150565b6106a2610c89565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106e8573d6000803e3d6000fd5b50565b6106f3610c89565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161078d9190611269565b60206040518083038186803b1580156107a557600080fd5b505afa1580156107b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dd9190611472565b6040518363ffffffff1660e01b81526004016107fa92919061150b565b602060405180830381600087803b15801561081457600080fd5b505af1158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061156c565b50565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610883610c89565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f43036333e58a6f9255617b54ec9f5825590c8ee695a222dc35e5001927f07151816040516108f391906112e3565b60405180910390a150565b6109086000610d8d565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600254826109699190611386565b9050919050565b6000349050600061098082610959565b9050600081116109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc9061143d565b60405180910390fd5b80600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a219190611269565b60206040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190611472565b1015610ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa9906114eb565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff16311015610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b03906114eb565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610b74573d6000803e3d6000fd5b50610ba2600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610d07565b7ff695091b71a5c3ea41510251da89a66470bbcf1ee118f820a1bab8739e29ea503382604051610bd392919061150b565b60405180910390a15050565b610be7610c89565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e9061160b565b60405180910390fd5b610c6081610d8d565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c91610e51565b73ffffffffffffffffffffffffffffffffffffffff16610caf61090a565b73ffffffffffffffffffffffffffffffffffffffff1614610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90611677565b60405180910390fd5b565b610d888363a9059cbb60e01b8484604051602401610d2692919061150b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e59565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000610ebb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f219092919063ffffffff16565b9050600081511480610edd575080806020019051810190610edc919061156c565b5b610f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1390611709565b60405180910390fd5b505050565b6060610f308484600085610f39565b90509392505050565b606082471015610f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f759061179b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fa79190611835565b60006040518083038185875af1925050503d8060008114610fe4576040519150601f19603f3d011682016040523d82523d6000602084013e610fe9565b606091505b5091509150610ffa87838387611006565b92505050949350505050565b6060831561106957600083511415611061576110218561107c565b611060576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105790611898565b60405180910390fd5b5b829050611074565b611073838361109f565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156110b25781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e6919061190d565b60405180910390fd5b6000819050919050565b611102816110ef565b82525050565b600060208201905061111d60008301846110f9565b92915050565b600080fd5b611131816110ef565b811461113c57600080fd5b50565b60008135905061114e81611128565b92915050565b60006020828403121561116a57611169611123565b5b60006111788482850161113f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111ac82611181565b9050919050565b6111bc816111a1565b82525050565b60006020820190506111d760008301846111b3565b92915050565b60006111e882611181565b9050919050565b60006111fa826111dd565b9050919050565b61120a816111ef565b811461121557600080fd5b50565b60008135905061122781611201565b92915050565b60006020828403121561124357611242611123565b5b600061125184828501611218565b91505092915050565b611263816111dd565b82525050565b600060208201905061127e600083018461125a565b92915050565b6000819050919050565b60006112a96112a461129f84611181565b611284565b611181565b9050919050565b60006112bb8261128e565b9050919050565b60006112cd826112b0565b9050919050565b6112dd816112c2565b82525050565b60006020820190506112f860008301846112d4565b92915050565b611307816111dd565b811461131257600080fd5b50565b600081359050611324816112fe565b92915050565b6000602082840312156113405761133f611123565b5b600061134e84828501611315565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611391826110ef565b915061139c836110ef565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156113d5576113d4611357565b5b828202905092915050565b600082825260208201905092915050565b7f416d6f756e74206973207a65726f000000000000000000000000000000000000600082015250565b6000611427600e836113e0565b9150611432826113f1565b602082019050919050565b600060208201905081810360008301526114568161141a565b9050919050565b60008151905061146c81611128565b92915050565b60006020828403121561148857611487611123565b5b60006114968482850161145d565b91505092915050565b7f496e73756666696369656e74206163636f756e742062616c616e636500000000600082015250565b60006114d5601c836113e0565b91506114e08261149f565b602082019050919050565b60006020820190508181036000830152611504816114c8565b9050919050565b6000604082019050611520600083018561125a565b61152d60208301846110f9565b9392505050565b60008115159050919050565b61154981611534565b811461155457600080fd5b50565b60008151905061156681611540565b92915050565b60006020828403121561158257611581611123565b5b600061159084828501611557565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006115f56026836113e0565b915061160082611599565b604082019050919050565b60006020820190508181036000830152611624816115e8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116616020836113e0565b915061166c8261162b565b602082019050919050565b6000602082019050818103600083015261169081611654565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006116f3602a836113e0565b91506116fe82611697565b604082019050919050565b60006020820190508181036000830152611722816116e6565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006117856026836113e0565b915061179082611729565b604082019050919050565b600060208201905081810360008301526117b481611778565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156117ef5780820151818401526020810190506117d4565b838111156117fe576000848401525b50505050565b600061180f826117bb565b61181981856117c6565b93506118298185602086016117d1565b80840191505092915050565b60006118418284611804565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611882601d836113e0565b915061188d8261184c565b602082019050919050565b600060208201905081810360008301526118b181611875565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006118df826118b8565b6118e981856113e0565b93506118f98185602086016117d1565b611902816118c3565b840191505092915050565b6000602082019050818103600083015261192781846118d4565b90509291505056fea264697066735822122077c3f7af7f1a75123929a755f2bce7b69a254d7458e109b027a145d13276683e64736f6c63430008090033";

type CrowdSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CrowdSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CrowdSale__factory extends ContractFactory {
  constructor(...args: CrowdSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    bnb_rate: PromiseOrValue<BigNumberish>,
    usdt_rate: PromiseOrValue<BigNumberish>,
    wallet: PromiseOrValue<string>,
    swapToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CrowdSale> {
    return super.deploy(
      bnb_rate,
      usdt_rate,
      wallet,
      swapToken,
      overrides || {}
    ) as Promise<CrowdSale>;
  }
  override getDeployTransaction(
    bnb_rate: PromiseOrValue<BigNumberish>,
    usdt_rate: PromiseOrValue<BigNumberish>,
    wallet: PromiseOrValue<string>,
    swapToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      bnb_rate,
      usdt_rate,
      wallet,
      swapToken,
      overrides || {}
    );
  }
  override attach(address: string): CrowdSale {
    return super.attach(address) as CrowdSale;
  }
  override connect(signer: Signer): CrowdSale__factory {
    return super.connect(signer) as CrowdSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrowdSaleInterface {
    return new utils.Interface(_abi) as CrowdSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrowdSale {
    return new Contract(address, _abi, signerOrProvider) as CrowdSale;
  }
}
